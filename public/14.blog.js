webpackJsonp([14],{348:function(e,n){e.exports="# Webpack and React is awesome\n\n**Note!** This article has aged quite a bit. Though it still has valid points, I would suggest reading some of my laster articles on Webpack to get up to speed.\n\nPreviously I have written a couple of articles about how to set up a workflow with React JS. The solution provided was [browserify](http://browserify.org) with [gulp](http://gulpjs.com). If React JS is not your thing I think you still will get a lot of value out of this article, so please read on.\n\nTo build a workflow for React JS with browserify and gulp you need a lot of dependencies and you have to write quite a bit of code. You might appreciate the flexibility gulp brings, but as the requirements of bundling your project grows, your workflow implementation becomes very complex. Nevertheless there are some core concepts you want to bring in to your React JS workflow:\n\n1. Bundle JavaScript with Common JS (to use components in Node JS)\n2. Sourcemapping\n3. Transform JSX (Coffe, TypeScript etc.)\n4. Split your vendor dependencies and app specific dependencies (fast rebundling)\n5. Bundle stylesheets (css, sass, less etc.)\n6. Handle images and fonts\n7. Make your code production ready\n\nDepending on your project you will of course have less or more requirements, but this is what I believe to be the core of it. What we are going to talk about in this article is how WebPack can help you very easily set up a workflow to handle these core concepts and some pretty amazing stuff on top of that. How does lazy loading your code sound? Or hot swapping React JS components without refreshing the browser? Loading CSS, less and sass with *require*? What about loading images that automatically inlines below a specific file size? These are some of the things we are going to talk about. If you want to get your hands dirty as you read, please do so, but it is definitely not required. You can also find an example workflow over at [this repo](https://github.com/christianalfoni/webpack-example).\n\n### WebPack\nMaybe like me you have also heard about WebPack. What motivated me to write this article was not my discovery of WebPack, but the [presentation by Pete Hunt](https://www.youtube.com/watch?v=VkTCL6Nqm6Y). He goes straight to the point of how WebPack differs and what makes it awesome. This is not the impression you get from looking at the WebPack site or reading its documentation. There is a [webpack-howto](https://github.com/petehunt/webpack-howto) that gives you a very simple and easy introduction to WebPack and we are actually going to go through the concepts mentioned there, though in more detail. We are also going to take it a bit further. We are going to use [webpack-dev-server](http://webpack.github.io/docs/webpack-dev-server.html) to introduce hot swapping of not only css, but also your JavaScript. That is pretty cool. Okay, so lets get going.\n\n### Installing and setting up webpack and webpack-dev-server\nFirst of all you will need to install both **webpack** and **webpack-dev-server**, using NPM. `npm install webpack` and `npm install webpack-dev-server`. This will allow you to run the command `webpack` and `webpack-dev-server` directly in your terminal. You will be using **webpack** to deploy your code and **webpack-dev-server** to run your workflow. We will first look at the workflow.\n\n### Creating a basic workflow\nOur project structure is:\n\n```javascript\n\n/project\n- /app\n-- main.js\n-- AppComponent.js\n- /build\n-- index.html\n-- bundle.js (automatically built by webpack)\n- webpack.config.js\n```\n\nJust like **grunt** and **gulp** you will need a file defining your setup. This file should by default be called `webpack.config.js` and looks something like this:\n\n```javascript\n\nmodule.exports = {\n  entry: ['./app/main.js'],\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  }\n};\n```\n\nWe just point to our application entry file and where we want our bundle to exist when it is produced. We will be looking more into this file later.\n\nI also recommend using a `package.json` file to configure a script that will run **webpack-dev-server** with some options. This is how a basic package.json would look like:\n\n```javascript\n\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.0.0\",\n  \"main\": \"app/main.js\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --devtool eval --progress --colors --content-base build\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nLet us just briefly talk about the script we have added here: `\"webpack-dev-server --devtool eval --progress --colors\"`. When you run `npm run dev` in your terminal this is what will be executed. It runs **webpack-dev-server** with some arguments. *--devtool eval* will add source urls to your code, which will make sure that any errors point to the right file and line. It is really important that you do it like this. Sourcemapping can be achieved with *--d*, but that is a lot slower. Use that for production if you want sourcemapping. *--progress* and *--colors* will just improve the feedback you get in the terminal when running your workflow. **--content-base build** points to where you have your custom *index.html* located.\n\n\n### Running the workflow\nLet us create an HTML file that our **webpack-dev-server** can serve when we fire up the workflow. Add an *index.html* file to the build folder and put something like this in it:\n\n```javascript\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>My project</title>\n</head>\n<body>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\nWe of course also have to create our */app/main.js* file. It will require an *AppComponent* so that we have some **Common JS** in action:\n\n```javascript\n\nvar AppComponent = require('./AppComponent.js');\nconsole.log('Loaded the app component');\n```\n\nAnd the *AppComponent.js* file just looks like this for now:\n\n```javascript\n\nmodule.exports = {};\n```\n\nWhen we now run the following in our terminal, `npm run dev`, and go to *localhost:8080* we will of course not see anything, but our console logs out: *\"Loaded the app component\"*. If you do any changes to the files WebPack will rebundle your app automatically. So making a change and refreshing the browser will show your changes. Okay, so now we have the basics down. Let us install React JS and see how we would implement a transformer from JSX to JavaScript.\n\n\n### WebPack loaders\nYou will have to install the loaders we need for the workflow, and the first one is **jsx-loader**. Run `npm install jsx-loader --save` in your terminal and head into the *webpack.config.js* file and we will do a small configuration:\n\n```javascript\n\nmodule.exports = {\n  entry: ['./app/main.js'],\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader' }\n    ]\n  }\n};\n```\n\nWhat we are basically doing here is telling WebPack that whenever we try to **require** something that ends with *.js* it should run the contents of that file through the **jsx-loader**. Thats it! No need for the JSX comment at top of file or the *jsx* extension. If you prefer creating *.jsx* files you just change to */\\.jsx$/*. Now lets install React JS and create our first component, `npm install react`.  And in our *AppComponent.js* file we insert:\n\n```javascript\n\nvar React = require('react');\nmodule.exports = React.createClass({\n  render: function () {\n    return (\n      <h1>Hello world!</h1>\n    );\n  }\n});\n```\n\nWe also want to render this component to the page, so in our *main.js* file we insert:\n\n```javascript\n\nvar React = require('react');\nvar AppComponent = require('./AppComponent.js');\nReact.render(<AppComponent/>, document.body);\n```\n\nSince we changed the configuration we need to stop the **webpack-dev-server** and start it again with `npm run dev`. When you refresh the browser, you see \"Hello world!\" on the screen. But we have met an issue here. When we do a change to a file it takes up to 300 ms to rebundle our application, and that with only two application files. In my book that is way too slow for a workflow.\n\n\n### Handling vendors\nWhen you create a bundling process in your workflow you want it to be as fast as possible. In Browserify you would solve this by creating two different bundles, one for vendors and one for your application. The vendors bundle is only bundled once and your application bundle is being watched for changes and rebundled when that occurs. This strategy does not work with WebPack though, because WebPack can not have two completely separate bundles and allow one of them to require from the other. That does not mean there is no solution. It took me some time to figure this one out, but the solution is quite simple.\n\nWe are going to change things around a bit. Instead of depending on **npm** for our browser vendors, we are going to use [bower](http://bower.io). So go ahead and install bower, `npm install bower -g` and then React JS, `bower install react --save`. Now we have react installed in a *bower_components* folder instead. To add this file to your project, create the following configuration:\n\n```javascript\n\n// For conveniance we create variable that holds the directory to bower_components\nvar bower_dir = __dirname + '/bower_components';\n\nmodule.exports = {\n  entry: ['./app/main.js'],\n\n  // The resolve.alias object takes require expressions\n  // (require('react')) as keys and filepath to actual\n  // module as values\n  resolve: {\n    alias: {\n      'react': bower_dir + '/react/react.min.js'\n    }\n  },\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n\n    // There is no reason for WebPack to parse this file\n    noParse: [bower_dir + '/react/react.min.js'],\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader' }\n    ]\n  }\n};\n```\n\nSo what we did here was bascially tell WebPack when *require('react')* is resolved in the code, it will use the *react.min.js* file located in *bower_components*. We also made sure that WebPack does not parse the file, because it is not necessary. You will actually get a warning if not using **noParse**. The reason is that WebPack more effectively compress a vendor by source, then a preminified file. We are talking about a few kilobytes, so it is up to you what is more important. Fast rebundling or an absolute minimum file size. The rebundle speed has now  dropped from 250-300 ms to 50-100 ms. That is a huge difference and when working with UI it will be the difference of \"instant browser reload\" and \"waiting for reload\".\n\nA small pro tip here is to create a method to add vendors. This makes it very easy to add, change and remove vendors:\n\n```javascript\n\n// For conveniance we create variable that holds the directory to bower_components\nvar bower_dir = __dirname + '/bower_components';\n\nvar config = {\n  addVendor: function (name, path) {\n    this.resolve.alias[name] = path;\n    this.module.noParse.push(new RegExp(path));\n  },\n  entry: ['./app/main.js'],\n  resolve: { alias: {} },\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    noParse: [],\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader' }\n    ]\n  }\n};\n\nconfig.addVendor('react', bower_dir + '/react/react.min.js');\n\nmodule.exports = config;\n```\n\nThis will also make it easy for you to use for example bootstrap:\n\n```javascript\n\nvar bower_dir = __dirname + '/bower_components';\n\nvar config = {\n  addVendor: function (name, path) {\n    this.resolve.alias[name] = path;\n    this.module.noParse.push(new RegExp(path));\n  },\n  entry: ['./app/main.js'],\n  resolve: { alias: {} },\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    noParse: [],\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader' }\n    ]\n  }\n};\n\nconfig.addVendor('bootstrap', bower_dir + '/bootstrap/bootstrap.min.js');\nconfig.addVendor('bootstrap.css', bower_dir + '/bootstrap/bootstrap.min.css')\n\nmodule.exports = config;\n```\n\nSo in your *main.js* file you can just require these two deps:\n\n```javascript\n\nrequire('bootstrap');\nrequire('bootstrap.css');\n\nvar React = require('react');\nvar AppComponent = require('./AppComponent.js');\nReact.render(<AppComponent/>, document.body);\n```\n\n\n### Specifying chunks\nCurrently we have one chunk in our WebPack bundle that includes our application and react. The chunk is loaded with the javascript file *bundle.js*. Larger applications will probably need to split the bundle into more chunks, which means more files. WebPack has a fantastic feature we are going to look at shortly, but for now, let us put all our vendors into a specific vendors chunk.\n\n```javascript\n\n// Add WebPack to use the included CommonsChunkPlugin\nvar webpack = require('webpack');\nvar bower_dir = __dirname + '/bower_components';\n\nvar config = {\n   addVendor: function (name, path) {\n    this.resolve.alias[name] = path;\n    this.module.noParse.push(new RegExp('^' + name + '$'));\n  },\n\n  // We split the entry into two specific chunks. Our app and vendors. Vendors\n  // specify that react should be part of that chunk\n  entry: {\n    app: ['./app/main.js'],\n    vendors: ['react']\n  },\n  resolve: { alias: {} },\n\n  // We add a plugin called CommonsChunkPlugin that will take the vendors chunk\n  // and create a vendors.js file. As you can see the first argument matches the key\n  // of the entry, \"vendors\"\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin('vendors', 'vendors.js')\n  ],\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    noParse: [],\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader' }\n    ]\n  }\n};\n\nconfig.addVendor('react', bower_dir + '/react/react.min.js');\n\nmodule.exports = config;\n```\n\nNow we have to add the new *vendors.js* file to our html:\n\n```javascript\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>My project</title>\n</head>\n<body>\n  <script src=\"vendors.js\"></script>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\nRestart the workflow and everything works as expected. So why would you want to do this? It is very unlikely that your vendors will change, but you will probably do bug fixes etc. on your application. So when a user visits the application the first time both *vendors.js* and *bundle.js* will be cached. If *bundle.js* is updated due to a bug fix, *vendors.js* will still be cached  and only *bundle.js* will be downloaded again.\n\n\n### Multiple lazy loaded entries\nOkay, lets dive into one of the really cool parts of WebPack. Lets say you are building a single page application that has a home-page and an admin-page. When users arrive at the home-page you do not want to download all the JavaScript and CSS of the admin-page. That is very easy to achieve. Let me show you with a minimal configuration:\n\n```javascript\n\nmodule.exports = {\n  entry: ['./app/main.js'],\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  }\n};\n```\n\nOur *main.js* file could look something like this:\n\n```javascript\n\nvar React = require('react');\n\n// We create a function that will lazy load modules based on the current hash\nvar resolveRoute = function () {\n\n  // If no hash or hash is '#' we lazy load the Home component\n  if (!location.hash || location.hash.length === 1) {\n    require.ensure([], function () {\n      var Home = require('./Home.js');\n      React.render(Home(), document.getElementById('app'));\n    });\n\n  // Or if route is #admin we lazy load that\n  } else if (location.hash === '#admin') {\n    require.ensure([], function () {\n      var Admin = require('./Admin.js');\n      React.render(Admin(), document.getElementById('app'));\n    });\n  }\n\n};\n\n// Resolve route on hash change\nwindow.onhashchange = resolveRoute;\n\n// Resolve current route\nresolveRoute();\n```\n\nThe index.html file looks like:\n\n```javascript\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>My project</title>\n</head>\n<body>\n  <div>\n\n\n  </div>\n  <div id=\"app\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\nIf you follow along on the network tab of the web console you will see network requests fire when clicking the hyperlinks. So now we have optimized our project by not downloading admin specific code if you only visit the home page. If you would go to admin and then back to home it would not trigger a new download, as the chunk is already downloaded. WebPack by default loads the chunks from the root url ('/'), but you can define the public path in your config where the bundles should be loaded.\n\n```javascript\n\nmodule.exports = {\n  entry: ['./app/main.js'],\n  output: {\n    path: './build',\n    filename: 'bundle.js',\n    publicPath: '/public/'\n  }\n};\n```\n\nIn this configuration React JS was included in the *bundle.js* file, but you could have created a specific vendors chunk like we did earlier. It all depends on how you want to load the files.\n\n\n### Optimizing with a common chunk\nSo what if both our *Home.js* file and our *Admin.js* required a third file, *Shared.js*. That would actually result in the contents of *Shared.js* to appear in both *Home.js* and *Admin.js*, which is definitely not what we want. We want WebPack to put modules used by multiple entry points into a common chunk. So let us do that:\n\n```javascript\n\nvar webpack = require('webpack');\nmodule.exports = {\n  entry: ['./app/main.js'],\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  plugins: [new webpack.optimize.CommonsChunkPlugin('main', null, false)]\n};\n```\n\nWe create a **CommonsChunkPlugin** and pass three arguments. The first argument refers to what entry point we want to put the shared code. The default entry point name is \"main\", which points to ['./app/main.js']. The second argument would be the name of the file, that holds the shared code, but since we already have an output for our main entry point (bundle.js) we leave it at null. The third argument tells webpack to look for common modules in our lazely required modules. There is actually a fourth argument here too which is a number. The number states how many of these lazy modules that needs to share a module before it is put into our main bundle.\n\nAn important note here is that the modules (main.js, Home.js or Admin.js) themselves does not have to require the common module, any dependency within a dependency will count. An example of this would be if *Home.js* required a module named *InnerHome.js* and *InnerHome.js* required our *Shared.js* module. The *Shared.js* module would still be included in main bundle.\n\n\n### Live reload\nLive reload is a common thing in a workflow, but we are going to take it a step further with WebPack. But lets first setup a normal live reload. **webpack-dev-server** supports this out of the box, all we have to do is put it in our config, fire it up in the right mode and add another script tag. Let us continue on the multiple entry point example:\n\n```javascript\n\nvar webpack = require('webpack');\nmodule.exports = {\n\n  // We add webpack/hot/dev-server to our main entry point\n  entry: {\n    app: ['webpack/hot/dev-server', './app/main.js'],\n    Home: ['./app/Home.js'],\n    Admin: ['./app/Admin.js']\n  },\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  plugins: [new webpack.optimize.CommonsChunkPlugin('common.js', 2)]\n};\n```\n\nWe also need to fire up the server in the \"hot\" mode simply by adding the \"--hot\" parameter in our package.json file:\n\n```javascript\n\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.0.0\",\n  \"main\": \"app/main.js\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --devtool eval --hot --progress --colors\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nAnd finally we add a script tag to the index.html file:\n\n```javascript\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>My project</title>\n</head>\n<body>\n  <div>\n\n\n  </div>\n  <div id=\"app\"></div>\n  <script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\n  <script src=\"common.js\"></script>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\nFire up the server again with `npm run dev` and whenever you do a file change the browser will refresh. Now, you could actually omit this script insertion in the index.html file and go to `localhost:8080/webpack-dev-server` instead. At the top of the browser you will see a rebundle status and your application is put into an iframe. Personally I do not like this as it changes the environment of the application (iframe), but also visually breaks your app with the bundle indication at the top. But is very cool indeed :-)\n\n\n### Lets do the hot swap!\nI will not go into detail about the general hot swapping in WebPack, but I will show you something quite awesome with React JS. Let us use the current example and update the *main.js* file:\n\n```javascript\n\nvar React = require('react');\n\nvar resolveRoute = function () {\n\n  if (!location.hash || location.hash.length === 1) {\n    require.ensure([], function () {\n      var Home = require('./Home.js');\n      React.render(Home(), document.getElementById('app'));\n    });\n\n  } else if (location.hash === '#admin') {\n    require.ensure([], function () {\n      var Admin = require('./Admin.js');\n      React.render(Admin(), document.getElementById('app'));\n    });\n  }\n\n};\n\nwindow.onhashchange = resolveRoute;\nresolveRoute();\n\n// If hot swapping can be done, do it by resolving the current route\n// and render the application again\nif (module.hot) {\n  module.hot.accept(resolveRoute);\n}\n```\n\nSo as stated in the comment whenever we now do a change to a component the application will actually rerender itself without refreshing the page. There are lots of possibilities with this hot swapping and you have to create your own strategy for it. This is an example of using routing and rerendering with React JS whenever any module has changed.\n\n\n### Loading CSS\nSo another very cool thing about WebPack is how you can require CSS files directly in your javascript. To allow for this we simply need to install a *style-loader* and a *css-loader*, `npm install style-loader --save` and `npm install css-loader --save`. We insert the loaders into our config:\n\n\n```javascript\n\nvar bower_dir = __dirname + '/bower_components';\n\nmodule.exports = {\n    entry: {\n    app: ['./app/main.js']\n  },\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n\n      // Adding a loader for css. To do this with less you download the\n      // less-loader and add it to the end of the load string here, and\n      // of course test for less files, not css\n      { test: /\\.css$/, loader: 'style-loader!css-loader' }\n    ]\n  }\n};\n```\n\nOut of the box any changes to the css/less will update without refreshing the page. But the really cool thing is something that happens \"under the hood\". All *url()* and *@import* statements will be handled as a *require expression*. So how does that benefit us? Lets look at images and fonts.\n\n\n### Images and fonts\nA typical css file that uses fonts and images. Now, webfonts is a science in itself and heavily depends on your target browsers. In font loading examples we normally see 4 different formats added. woff, ttf, svg and eot. But that is hard to optimize, because only one of those formats will actually be used. Converting the font files to inline base64 string would cause all 4 to be included, increasing the file size unnecessarily.\n\nLooking at [caniuse.com](http://caniuse.com) we see that modern browsers support woff and svg. So depending on your project I would suggest sticking to only one of those two formats. Doing so will let us optimize it. Let us look at the code so that you see what I mean:\n\n```javascript\n\n@font-face {\n  font-family: 'myFont';\n  font-style: normal;\n  src: url(./myFont.woff) format('woff');\n}\n\nbody {\n  font-family: 'myFont',\n  background-image: url(./bg.png);\n}\n```\n\nWhat WebPack does in this case is actually resolving the url paths and runs them through the matching loaders. Let us download the url loader, `npm install url-loader --save`, and change the config:\n\n```javascript\n\nvar bower_dir = __dirname + '/bower_components';\n\nmodule.exports = {\n  entry: {\n    app: ['./app/main.js']\n  },\n  output: {\n    path: './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      { test: /\\.css$/, loader: 'style-loader!css-loader' },\n\n      // Any png-image or woff-font below or equal to 100K will be converted\n      // to inline base64 instead\n      { test: /\\.(png|woff)$/, loader: 'url-loader?limit=100000' }\n    ]\n  }\n};\n```\n\nThe result of the file will be something like this, shortening the base64 string:\n\n```javascript\n\n@font-face {\n  font-family: 'myFont';\n  font-style: normal;\n  src: url(data:application/font-woff;base64...) format('woff');\n}\n\nbody {\n  font-family: 'myFont',\n  background-image: url(data:image/png;base64...);\n}\n```\n\nSo now you see why multiple fonts would be a bad idea as you would inline content that would never be used. No matter, it is important to be careful with inlining as it will take longer to download the CSS and if changes to the CSS is made it will need to bring down also your inlined images and fonts, which would not be necessary if they were external files.\n\n### Deploying your application\nTo produce a production ready application we have to add a new script to our package.json file:\n\n```javascript\n\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.0.0\",\n  \"main\": \"app/main.js\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --devtool eval --progress --colors\",\n    \"deploy\": \"NODE_ENV=production webpack -p\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nThis script runs node in production mode and runs the production packaging of WebPack. It will uglify, minify and so on. To specify where to put the result we have to update the config:\n\n```javascript\n\nvar bower_dir = __dirname + '/bower_components';\n\nvar config = {\n  addVendor: function (name, path) {\n    this.resolve.alias[name] = path;\n    this.module.noParse.push(new RegExp('^' + name + '$'));\n  },\n  entry: ['./app/main.js'],\n  resolve: { alias: {} },\n  output: {\n\n    // If in production mode we put the files into the dist folder instead\n    path: process.env.NODE_ENV === 'production' ? './dist' : './build',\n    filename: 'bundle.js'\n  },\n  module: {\n    noParse: [],\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader' }\n    ]\n  }\n};\n\nconfig.addVendor('react', bower_dir + '/react/react.min.js');\n\nmodule.exports = config;\n```\n\nAnd thats it. Your application is ready!\n\n### Summary\nWebPack is just an awesome tool. It takes application bundling to a whole new level. It is really too bad that documentation is lacking. Hopefully this article gave you some insight into what makes WebPack great. Have a look at [this simple example](https://github.com/christianalfoni/webpack-example) that lets you enjoy all the functionality mentioned in this article. Also take a look at this webpack react cookbook @bebraw and I am working on: [webpack-react-cookbook](https://github.com/christianalfoni/react-webpack-cookbook).\n"}});
//# sourceMappingURL=14.blog.js.map